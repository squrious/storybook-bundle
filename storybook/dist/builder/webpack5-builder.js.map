{"version":3,"sources":["../../src/builder/webpack5-builder.ts"],"names":[],"mappings":";AAEA,SAAS,OAAO,MAAM,WAAW,aAAa,uBAAuB;AACrE,SAAS,SAAS,iBAAiB;AACnC,SAAQ,6BAA4B;AAE7B,IAAM,QAA0B,OAAO,YAAY;AACxD,QAAM,SAAS,QAAQ,QAAQ,eAAe;AAE9C,QAAM,EAAE,QAAQ,IAAI,MAAM,QAAQ,QAAQ,QAAQ,MAAiC,kBAAkB;AAErG,MAAI,QAAQ,YAAY;AACtB,UAAM,QAAQ,CAAC,MAAM,QAAQ,QAAQ,UAAU,IAAI,CAAC,QAAQ,UAAU,IAAI,QAAQ;AAClF,aAAS,QAAQ,OAAO;AACtB,cAAQ,OAAO,IAAI,MAAM,sBAAsB;AAAA,QAC7C,QAAQ,QAAQ;AAAA,QAChB,cAAc;AAAA,QACd,QAAQ;AAAA,MACV,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAEA,SAAO,UAAU,OAAO;AAC1B","sourcesContent":["import { SymfonyOptions } from '../types';\n\nexport { build, bail, getConfig, corePresets, overridePresets } from \"@storybook/builder-webpack5\";\nimport { start as baseStart } from \"@storybook/builder-webpack5\";\nimport {createProxyMiddleware} from 'http-proxy-middleware';\n\nexport const start: typeof baseStart = async (options) => {\n  const isProd = options.options.configType === 'PRODUCTION';\n\n  const { symfony } = await options.options.presets.apply<{symfony: SymfonyOptions}>('frameworkOptions');\n\n  if (symfony.proxyPaths) {\n    const paths = !Array.isArray(symfony.proxyPaths) ? [symfony.proxyPaths] : symfony.proxyPaths;\n    for (let path of paths) {\n      options.router.use(path, createProxyMiddleware({\n        target: symfony.server,\n        changeOrigin: true,\n        secure: isProd\n      }));\n    }\n  }\n\n  return baseStart(options);\n}\n"]}